# Start from golang base image
FROM golang:latest as builder

ARG app_env
ENV APP_ENV $app_env

COPY . /go/src/turkdev/api
WORKDIR /go/src/turkdev/api

# Copy go mod and sum files 
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and the go.sum files are not changed 
RUN go mod download 

# Build the Go app
# CGO_ENABLED=0 GOARCH=386 -a -installsuffix
RUN CGO_ENABLED=0 go build -o main .

# Start a new stage from scratch
FROM alpine:latest
RUN apk --no-cache add ca-certificates

WORKDIR /root/

# Copy the Pre-built binary file from the previous stage.
COPY --from=builder /go/src/turkdev/api/main .
COPY --from=builder /go/src/turkdev/api/.env .
COPY --from=builder /go/src/turkdev/api/src/templates ./src/templates
COPY --from=builder /go/src/turkdev/api/dist ./dist
COPY --from=builder /go/src/turkdev/api/src/data/sql_scripts ./sql_scripts

# Expose port to the outside world
EXPOSE 8080

ENTRYPOINT [./main];

# if dev setting will use pilu/fresh for code reloading via docker-compose volume sharing with local machine
# if production setting will build binary
# CMD if [ ${APP_ENV} = production ]; \
#     then \
#     [./main]; \
#     else \
#     go get github.com/pilu/fresh && \
#     fresh; \
#     fi